#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatify:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

let io = require('socket.io')(server)
io.on('connection', function (socket) {
  console.log("Se han conectado al socket")
  console.log("CLIENTES:", io.engine.clientsCount)
  // socket.broadcast emite a todos menos a mi
  socket.broadcast.emit('mensajeChatServer', { nick: "INFO", mensaje: "Se ha conectado un nuevo usuario", mode: "default", human: false })
  io.emit('mensajeChatServer', { nick: "INFO", mensaje: `Hay conectados ${io.engine.clientsCount} clientes`, mode: "contador", human: false })


  //cuando llega evneto mensajeChat desde el cliente
  socket.on('mensajeChatCliente', function (data) {
    console.log("del cliente ha llegado", data)
    // el server emite a todos (io)
    data.mode = "default"
    data.human = true
    io.emit('mensajeChatServer', data)
  })

  socket.on('disconnect', function () {
    console.log("ha habido un socket disconnect, quedan ", io.engine.clientsCount)
    socket.broadcast.emit('mensajeChatServer', { nick: 'INFO', mensaje: "Se ha desconectado un usuario", mode: "default", human: false })
    io.emit('mensajeChatServer', { nick: "INFO", mensaje: `Hay conectados ${io.engine.clientsCount} clientes`, mode: "contador", human: false })
  })
})


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
